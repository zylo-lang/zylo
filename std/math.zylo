// Mathematical constants and advanced functions
PI const float := 3.141592653589793
E const float := 2.718281828459045
TAU const float := 6.283185307179586
PHI const float := 1.618033988749895

// Basic arithmetic functions
func add(a float, b float) float {
    return a + b
}

func subtract(a float, b float) float {
    return a - b
}

func multiply(a float, b float) float {
    return a * b
}

func divide(a float, b float) float {
    return a / b
}

func safe_div(a float, b float) float {
    if b == 0 {
        show.error("[ZYLO_ERR_105] Tipo: División por cero. Línea: -1, Columna: -1")
        return 0
    }
    return a / b
}

func power(base float, exponent float) float {
    result float := 1
    i int := 0
    if exponent > 0 {
        result = base
        i = 1
        while i < int(exponent) {
            result = result * base
            i = i + 1
        }
    }
    return result
}

func sqrt(x float) float {
    if x < 0 {
        show.error("[ZYLO_ERR_106] Tipo: Raíz cuadrada de número negativo. Línea: -1, Columna: -1")
        return 0
    }
    // Simple approximation
    result float := x / 2
    precision float := 0.0001
    while (result * result - x) > precision || (x - result * result) > precision {
        result = (result + x / result) / 2
    }
    return result
}

func abs(x float) float {
    if x < 0 {
        return -x
    }
    return x
}

func factorial(n int) int {
    if n < 0 {
        show.error("[ZYLO_ERR_107] Tipo: Factorial de número negativo. Línea: -1, Columna: -1")
        return 0
    }
    if n <= 1 {
        return 1
    }
    result int := 1
    i int := 2
    while i <= n {
        result = result * i
        i = i + 1
    }
    return result
}

func gcd(a int, b int) int {
    a = abs(float(a))
    b = abs(float(b))
    while b != 0 {
        temp int := b
        b = a % b
        a = temp
    }
    return a
}

func lcm(a int, b int) int {
    if a == 0 || b == 0 {
        return 0
    }
    return (a * b) / gcd(a, b)
}

func is_prime(n int) bool {
    if n <= 1 {
        return false
    }
    if n <= 3 {
        return true
    }
    if n % 2 == 0 || n % 3 == 0 {
        return false
    }
    i int := 5
    while i * i <= n {
        if n % i == 0 || n % (i + 2) == 0 {
            return false
        }
        i = i + 6
    }
    return true
}

func fibonacci_iterative(n int) int {
    if n < 0 {
        show.error("[ZYLO_ERR_108] Tipo: Fibonacci con índice negativo. Línea: -1, Columna: -1")
        return 0
    }
    if n <= 1 {
        return n
    }
    a int := 0
    b int := 1
    i int := 2
    while i <= n {
        temp int := a + b
        a = b
        b = temp
        i = i + 1
    }
    return b
}

func degrees_to_radians(degrees float) float {
    return degrees * PI / 180.0
}

func radians_to_degrees(radians float) float {
    return radians * 180.0 / PI
}

func clamp(value float, min float, max float) float {
    if value < min {
        return min
    }
    if value > max {
        return max
    }
    return value
}

func lerp(a float, b float, t float) float {
    return a + (b - a) * t
}

func map_range(value float, from_min float, from_max float, to_min float, to_max float) float {
    if from_max == from_min {
        show.error("[ZYLO_ERR_109] Tipo: Rango de entrada inválido en map_range. Línea: -1, Columna: -1")
        return to_min
    }
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min)
}
