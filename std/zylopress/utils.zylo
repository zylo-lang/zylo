// ZyloPress Utils Module - Native Zylo

// Logger
var logger = {
  info: (msg: String) => zylo.console.log('[INFO] ' + zylo.time.iso() + ': ' + msg),
  error: (msg: String) => zylo.console.error('[ERROR] ' + zylo.time.iso() + ': ' + msg),
  warn: (msg: String) => zylo.console.warn('[WARN] ' + zylo.time.iso() + ': ' + msg),
  debug: (msg: String) => zylo.console.log('[DEBUG] ' + zylo.time.iso() + ': ' + msg)
}

// Validation function
func validate(data: Map, rules: Map) -> Map {
  var errors = []
  for (field in rules.keys()) {
    var rule = rules[field]
    if (rule.required && !data[field]) {
      errors.push(field + ' is required')
    }
    if (rule.type && typeof data[field] != rule.type) {
      errors.push(field + ' must be ' + rule.type)
    }
    if (rule.minLength && data[field].length < rule.minLength) {
      errors.push(field + ' must be at least ' + rule.minLength + ' characters')
    }
    if (rule.maxLength && data[field].length > rule.maxLength) {
      errors.push(field + ' must be at most ' + rule.maxLength + ' characters')
    }
    if (rule.pattern && !rule.pattern.test(data[field])) {
      errors.push(field + ' format is invalid')
    }
  }
  return { isValid: errors.length == 0, errors: errors }
}

// HAST Helpers for generating safe HTML
func escapeHtml(text: String) -> String {
  return text.replace(/[&<>"']/g, (char) => {
    switch char {
      case '&': return '&'
      case '<': return '<'
      case '>': return '>'
      case '"': return '"'
      case "'": return '''
      default: return char
    }
  })
}

func h(tag: String, attrs: Map = {}, children: List = []) -> String {
  var attrStr = attrs.keys().map(k => ' ' + k + '="' + escapeHtml(attrs[k]) + '"').join('')
  var childStr = children.map(c => typeof c == 'string' ? escapeHtml(c) : c).join('')
  return '<' + tag + attrStr + '>' + childStr + '</' + tag + '>'
}

func div(attrs: Map, children: List) -> String { return h('div', attrs, children) }
func p(attrs: Map, children: List) -> String { return h('p', attrs, children) }
func span(attrs: Map, children: List) -> String { return h('span', attrs, children) }

// Generate API documentation
func generateDocs(routes: Map) -> Map {
  var docs = {
    openapi: '3.0.0',
    info: { title: 'ZyloPress API', version: '1.0.0' },
    paths: {}
  }

  for (routeKey in routes.keys()) {
    var parts = routeKey.split(' ')
    var method = parts[0].toLowerCase()
    var path = parts[1]
    if (!docs.paths[path]) {
      docs.paths[path] = {}
    }
    docs.paths[path][method] = {
      responses: {
        200: { description: 'Success' }
      }
    }
  }

  return docs
}

export { logger, validate, h, div, p, span, generateDocs }