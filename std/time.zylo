// Basic time utilities for Zylo standard library

// Time constants
MILLISECONDS_PER_SECOND := 1000
SECONDS_PER_MINUTE := 60
MINUTES_PER_HOUR := 60
HOURS_PER_DAY := 24

SECONDS_PER_HOUR := SECONDS_PER_MINUTE * MINUTES_PER_HOUR
SECONDS_PER_DAY := SECONDS_PER_HOUR * HOURS_PER_DAY
MILLISECONDS_PER_DAY := MILLISECONDS_PER_SECOND * SECONDS_PER_DAY

// Get current timestamp in milliseconds since Unix epoch
func now() int {
    // Implementation handled by runtime
    return 0 // Placeholder - runtime will provide actual value
}

// Get current timestamp in seconds since Unix epoch
func unix_timestamp() int {
    return now() / MILLISECONDS_PER_SECOND
}

// Sleep for specified milliseconds
func sleep(milliseconds int) {
    if milliseconds < 0 {
        show.error("[ZYLO_ERR_110] Tipo: Tiempo de sleep negativo. Línea: -1, Columna: -1")
        return
    }
    // Implementation handled by runtime
}

// Sleep for specified seconds
func sleep_seconds(seconds int) {
    sleep(seconds * MILLISECONDS_PER_SECOND)
}

// Simple timer functionality
func start_timer() int {
    return now()
}

func elapsed_time(start_time int) int {
    return now() - start_time
}

// Format timestamp to basic string format
func format_timestamp(timestamp int) string {
    if timestamp < 0 {
        show.error("[ZYLO_ERR_111] Tipo: Timestamp negativo. Línea: -1, Columna: -1")
        return ""
    }

    total_seconds int := timestamp / MILLISECONDS_PER_SECOND
    hours int := total_seconds / SECONDS_PER_HOUR
    minutes int := (total_seconds % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE
    seconds int := total_seconds % SECONDS_PER_MINUTE

    return string(hours) + ":" + string(minutes) + ":" + string(seconds)
}

// Check if a year is a leap year
func is_leap_year(year int) bool {
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)
}

// Get days in month
func days_in_month(year int, month int) int {
    if month < 1 || month > 12 {
        show.error("[ZYLO_ERR_112] Tipo: Mes inválido. Línea: -1, Columna: -1")
        return 0
    }

    days_per_month []int := [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    if month == 2 && is_leap_year(year) {
        return 29
    }

    return days_per_month[month - 1]
}

// Validate date components
func is_valid_date(year int, month int, day int) bool {
    if month < 1 || month > 12 || day < 1 {
        return false
    }

    days_in_selected_month int := days_in_month(year, month)
    return day <= days_in_selected_month
}

// Simple delay wrapper for compatibility
func delay(milliseconds int) {
    sleep(milliseconds)
}
